{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","name","onChange","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","updatedTodos","removedArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMA+DeA,MA7Df,SAAkBC,GAAO,IAAD,EAEMC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAF/C,mBAEbC,EAFa,KAENC,EAFM,KAIdC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAGhBW,EAAe,SAAAF,GACjBA,EAAEG,iBAEFf,EAAMgB,SAAS,CACXC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAGVC,EAAS,KAGb,OACI,sBAAMiB,UAAU,YAAYN,SAAUF,EAAtC,SACKd,EAAME,KACH,qCACI,uBACIqB,YAAY,mBACZpB,MAAOC,EACPoB,KAAK,OACLF,UAAU,kBACVG,SAAUd,EACVe,IAAKpB,IAGT,wBAAQqB,QAASb,EAAcQ,UAAU,mBAAzC,uBAKJ,qCACE,uBACEC,YAAY,aACZpB,MAAOC,EACPqB,SAAUd,EACVa,KAAK,OACLF,UAAU,aACVI,IAAKpB,IAEP,wBAAQqB,QAASb,EAAcQ,UAAU,cAAzC,4B,eCPHM,MA1Cf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAAa,EAEjC/B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAJ8C,mBAElDD,EAFkD,KAE5C+B,EAF4C,KAezD,OAAG/B,EAAKe,GACG,cAAC,EAAD,CAAUf,KAAMA,EAAMc,SATZ,SAAAb,GACjB6B,EAAW9B,EAAKe,GAAId,GACpB8B,EAAQ,CACJhB,GAAI,KACJd,MAAO,QAQR0B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKd,UAAWa,EAAKE,WAAa,oBAAsB,WAAxD,UAIA,qBAAmBV,QAAS,kBAAKG,EAAaK,EAAKlB,KAAnD,SACSkB,EAAKd,MADJc,EAAKlB,IAIf,sBAAKK,UAAU,QAAf,UACQ,cAAC,IAAD,CACGK,QAAS,kBAAMI,EAAWI,EAAKlB,KAC/BK,UAAU,gBAEb,cAAC,IAAD,CACGK,QAAS,kBAAMM,EAAQ,CAAEhB,GAAIkB,EAAKlB,GAAId,MAAOgC,EAAKd,QAClDC,UAAU,mBAdXc,OC6BHE,MAnDf,WAAqB,IAAD,EAEUrC,mBAAS,IAFnB,mBAET4B,EAFS,KAEFU,EAFE,KAsChB,OACI,qCACI,6DACA,cAAC,EAAD,CAAUvB,SArCF,SAAAmB,GACZ,GAAIA,EAAKd,OAAQ,QAAQmB,KAAKL,EAAKd,MAAnC,CAIA,IAAMoB,EAAQ,CAAIN,GAAJ,mBAAaN,IAE3BU,EAASE,OA+BL,cAAC,EAAD,CAAMZ,MAAOA,EACPC,aAfO,SAAAb,GACjB,IAAIyB,EAAeb,EAAMK,KAAI,SAAAC,GAI3B,OAHIA,EAAKlB,KAAOA,IACdkB,EAAKE,YAAcF,EAAKE,YAEnBF,KAETI,EAASG,IASCX,WAtBK,SAAAd,GACf,IAAM0B,EAAa,YAAId,GAAOe,QAAO,SAAAT,GAAI,OAAIA,EAAKlB,KAAOA,KAEzDsB,EAASI,IAoBCX,WA/BK,SAACa,EAAQC,GACnBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAI5CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKb,KAAI,SAAAc,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCX5DC,MARf,WACE,OACE,qBAAK3B,UAAU,WAAf,SACE,cAAC,EAAD,OCHN4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1c9ac2f1.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nfunction TodoForm(props){\n\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        inputRef.current.focus();\n      });\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        props.onSubmit({\n            id: Math.floor(Math.random() * 10000),\n            text: input \n        });\n\n        setInput('');\n    };\n\n    return (\n        <form className='todo-form' onSubmit={handleSubmit}>\n            {props.edit ? (\n                <>\n                    <input \n                        placeholder=\"Update your Item\" \n                        value={input} \n                        name=\"text\" \n                        className=\"todo-input edit\"\n                        onChange={handleChange}\n                        ref={inputRef}\n                    />\n\n                    <button onClick={handleSubmit} className=\"todo-button edit\"> \n                        Update\n                    </button> \n                </>\n            ) : (\n                <>\n                  <input\n                    placeholder='Add a todo'\n                    value={input}\n                    onChange={handleChange}\n                    name='text'\n                    className='todo-input'\n                    ref={inputRef}\n                  />\n                  <button onClick={handleSubmit} className='todo-button'>\n                    Add todo\n                  </button>\n                </>\n              )}     \n        </form>\n    )\n}\n\nexport default TodoForm ;\n","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\n\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\n\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    })\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value)\n        setEdit({\n            id: null,\n            value: ''\n        });\n    };\n\n    if(edit.id){\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\n    }\n\n    return todos.map((todo, index) => (\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} \n             key={index}\n        >\n\n        <div key={todo.id} onClick={() =>completeTodo(todo.id)}>\n                {todo.text}\n        </div>\n\n        <div className=\"icons\">\n                <RiCloseCircleLine\n                   onClick={() => removeTodo(todo.id)}\n                   className='delete-icon'\n                />\n                <TiEdit \n                   onClick={() => setEdit({ id: todo.id, value: todo.text })}\n                   className='edit-icon'\n                />\n        </div>\n        </div>\n    ))\n}\n\nexport default Todo;\n","import React, { useState }  from 'react';\nimport Todo from './Todo';\nimport TodoForm from './TodoForm';\n\nfunction TodoList() {\n\n    const [todos, setTodos] = useState([]);\n\n    const addTodo = todo => {\n        if(!todo.text || /^\\s*$/.test(todo.text)){\n            return;\n        }\n\n        const newTodos = [todo, ...todos];\n\n        setTodos(newTodos);\n    }\n\n    const updateTodo = (todoId, newValue) => {\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n          return;\n        }\n    \n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n      };\n\n    const removeTodo = id => {\n        const removedArr = [...todos].filter(todo => todo.id !== id);\n    \n        setTodos(removedArr);\n      };\n  \n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n          if (todo.id === id) {\n            todo.isComplete = !todo.isComplete;\n          }\n          return todo;\n        });\n        setTodos(updatedTodos);\n      };\n\n    return (\n        <>\n            <h1>What's the Plan for Today ?</h1>\n            <TodoForm onSubmit={addTodo}/>\n            <Todo todos={todos}\n                  completeTodo={completeTodo} \n                  removeTodo={removeTodo}\n                  updateTodo={updateTodo}\n            />\n        </>\n    );\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}